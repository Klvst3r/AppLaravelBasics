6.2. Control de Versiones de Bd - Migrations


Archivos
-----

    Secciones:

        migraciones
            database/migrations
                2014_10_12_000000_create_users_table.php
                2014_10_12_100000_create_password_resets_table.php



Contenido
---------

En la seecion acterior vimos como se integran las bases de datos en Laravel y como se integran las variables de entorno.

En esta sección se vera que son y para que sirven las migraciones.

Las migraciones son una especie de control de versiones para bases de datos, permiete modificarlas y compartirlar.

La carpeta donde se guardan las migraciones se encunetra en

database/migrations

Existen regularmente dos migraciones de entrada que Laravel contiene por defecto.

- Una para crear la tabla de usuarios y otra 
- Para crear la tabla de password_resets

Toda migracion esta compuesta por dos metodos 

---
        <?php

        use Illuminate\Database\Migrations\Migration;
        use Illuminate\Database\Schema\Blueprint;
        use Illuminate\Support\Facades\Schema;

        return new class extends Migration
        {
            /**
             * Run the migrations.
             */
            public function up(): void
            {
                Schema::create('users', function (Blueprint $table) {
                    $table->id();
                    $table->string('name');
                    $table->string('email')->unique();
                    $table->timestamp('email_verified_at')->nullable();
                    $table->string('password');
                    $table->rememberToken();
                    $table->timestamps();
                });
            }

            /**
             * Reverse the migrations.
             */
            public function down(): void
            {
                Schema::dropIfExists('users');
            }
        };

---

En el metodo up() utilizamos la clase Schema para crear la base de datos users y dentro de esta función definimos los campos de la tabla.

Primero se definen los campos de la tabla con un campo invrementable id, como llave primaria, luego un campo 'name' de tipo string, luego un campo 'email' tambien como string con una llave de valor unica, luego un string de nombre password, a continuacion haty una funcion que devuelve un campo llamado 'rememberToken'


La definición se encunetra en el archivo
    Blueprint.php

Con un maximo de 100 caracteres, y que su valor puede ser nulo.  Es lo mismo que hacer:
    $table->string('remember_token', 100)->nullable;

Pero a Laravel le gusta las cosas limpias.

el ultimo metodo son los timestamps que devuelven dos campos de fecha y hora para saber cuando fue creado el usuario y cuando fue actualizado, tambien definido en Blueprint.php
---
    public function timestamps()
    {
        $this->timestamp('created_at')->nullable;

        $this->timestamp('updated_at')->nullable;
    }
---    

Para almacenar la inforamción de cuando fue creada por el usuario y cuando fue actualizado. Es similar a agrgar lo siguiente:

---
public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email')->unique();
            $table->string('password');
            $table->rememberToken();

            $this->timestamps('created_at')->nullable();
            $this->timestamps('updated_at')->nullable();
        });
    }

---

Vamos a la terminal y ejecutamos, tomando en consideración que se ejecuta la migracion inicuial del usuario con: la definiciónm inicial

---
public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }

---

En Terminal:
    php artisan 

Existe un namespace llamado
    migrate

    Con cinco comandos:

        migrate:install
        migrate:refresh
        migrate:reset 
        migrate:rollback
        migrate:status


Ejecutar migraciones
---------------------


El comando a ejecutar es el siguiente para correr las migraciones de la base de datos:

Lo que hara el comando es ejecutar es todas las migraciones de la carpeta migrations.

Ejecutando:
    php artisan migrate


el resualtado sera algo como
---


Errores:
---------

 Illuminate\Database\QueryException 

  SQLSTATE[HY000] [1698] Access denied for user 'root'@'localhost' (Connection: mysql, SQL: select * from information_schema.tables where table_schema = applaravelbasics and table_name = migrations and table_type = 'BASE TABLE')

  at vendor/laravel/framework/src/Illuminate/Database/Connection.php:795



Por lo que modificamos nuestro archivo de configuaración:



DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=applaravel
DB_USERNAME=root
DB_PASSWORD=desarrollo




Volvemos a ejecutar




        php artisan migrate


   WARN  The database 'db' does not exist on the 'mysql' connection.  

  Would you like to create it? (yes/no) [no]
❯ yes

   INFO  Preparing database.  

  Creating migration table .............................................................................................................. 20ms DONE

   INFO  Running migrations.  

  2014_10_12_000000_create_users_table .................................................................................................. 22ms DONE
  2014_10_12_100000_create_password_resets_table ........................................................................................ 30ms DONE
  2019_08_19_000000_create_failed_jobs_table ............................................................................................ 23ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ................................................................................. 31ms DONE
---

Ahora se encuentyra la tabla usuarios y password_resets.


Verificamos las tablas creadas


    show tables;
    +------------------------+
    | Tables_in_applaravel   |
    +------------------------+
    | failed_jobs            |
    | migrations             |
    | password_reset_tokens  |
    | personal_access_tokens |
    | users                  |
    +------------------------+
    5 rows in set (0.001 sec)




En la tabla usuarios, que el Id es de tipo entero, llave primaria autoincrementable.

MariaDB [db]> desc users;
+-------------------+---------------------+------+-----+---------+----------------+
| Field             | Type                | Null | Key | Default | Extra          |
+-------------------+---------------------+------+-----+---------+----------------+
| id                | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |
| name              | varchar(255)        | NO   |     | NULL    |                |
| email             | varchar(255)        | NO   | UNI | NULL    |                |
| email_verified_at | timestamp           | YES  |     | NULL    |                |
| password          | varchar(255)        | NO   |     | NULL    |                |
| remember_token    | varchar(100)        | YES  |     | NULL    |                |
| created_at        | timestamp           | YES  |     | NULL    |                |
| updated_at        | timestamp           | YES  |     | NULL    |                |
+-------------------+---------------------+------+-----+---------+----------------+
8 rows in set (0.002 sec)

El name es de tipo varchar, email varchar con una llave unica, pass varchar, remermber, con permisos de los campos de ser nulos, alfinal hasy dos campos de tipo timestamps.


Deshacer las migraciones:
----------------------


En la terminal escribimos  

    php artisan migrate:rollback

Este comando ejecuta el metodo down() de todas las migraciones, si actualizamos la base de datos veremos que nuevamente esta vacia.


solo queda la tabla "migrations"


    show tables;
    +----------------------+
    | Tables_in_applaravel |
    +----------------------+
    | migrations           |
    +----------------------+
    1 row in set (0.001 sec)


Que sirve para llevar el control de las migraciones, nosotrso no debemos preocuparnos por ello.

Entonces, una vez mas para que quede claro, el metodo up() se ejecuta al escribri "php artisan make:migration" y el metodo down() se ejecuta al usar el comando php artisan migrate:roolback


Ahora vamos a crear nuestra migración para los mensajes, es decir la estructura para guardar los mensajes.

En la terinal:

    php artisan make:migration

Para crear nuevas migraciones. al igual que con los middlewares, le damos un nombre que describa la acion que realiza con_ para separar las palabras

Ej. 

    php artisan make:migration create_users_table    

En nuestro caso vamos a cear la tabla mensajes, entonces, cambiamos:

    php artisan make:migration create_messages_table


Si ejecutamos, vemos que nos añade la fecha de creación del archivo, en el nombre, revisando el archivo:




Creando los dos metodos necesarios

con el up y el down necesarios, dentro tendriamos que escribir el metodo necesario  de la tabla, sin embargo el esquema es el mismo siempre que creamos una tabla.

Por eso tenemos una oćión que podemos añadir al comando que crea el esquema por nosotros.


En terminal.

    php artisan make:migration create_messages_table --create

Esto es para indicarle que vamos a crear una tabla pasando el nombre de la tabla en este caso: "messages".


Senetencia final para la tabla de mensajes:

    php artisan make:migration create_messages_table --create=messages


Ejecutamos y si revisamos la migración, ahora nos incluye el codigo necesario para crear la tabla mensajes.

Tambien nos incluye por defecto un identifcdor incremental con los dos campos de auditoria para guardar los datos de creación y modificación.


Ahora solo nos queda añadir los  campos de la tabla:



Añadiendo los campos de la tabla mensajes

    Nombre
    Email
    Mensaje



Modificando el metodo up de la tabla de creación de mensajes


---
        return new class extends Migration
        {
            /**
             * Run the migrations.
             */
            public function up(): void
            {
                Schema::create('messages', function (Blueprint $table) {
                    $table->increments('id');
                    $table->string('nombre');
                    $table->string('email');
                    $table->string('mensaje');
                    $table->timestamps();
                });
            }

            /**
             * Reverse the migrations.
             */
            public function down(): void
            {
                Schema::dropIfExists('messages');
            }
        };
---    


Si queremos saber todos los tipos de campos podemos visitar

    https://laravel.com/docs//migrations


Para nuestra versión en cuestion:

    https://laravel.com/docs/10.x/migrations


La sección

    # Available Column Types        




Ahora que ya tenemos nuestra migración, aunque aun no se ha ejecutado; esto es algo que confunde al principio especialmente los que inician con Laravel.

Ya que se piensa que al momento de crear la migración, automaticamente ya tenemos la tabla creada en la base de datos, y no es asi.




Segundo paso
------------

El segundo paso despues de crar la migración, es ejecutarla y lo hacemo con el comando:

    php artisan migrate




Resultando satisfactoria la creaciṕon de las tablas:


     php artisan migrate

       INFO  Running migrations.  

      2014_10_12_000000_create_users_table ............................................................................ 15ms DONE
      2014_10_12_100000_create_password_reset_tokens_table ............................................................ 16ms DONE
      2019_08_19_000000_create_failed_jobs_table ...................................................................... 12ms DONE
      2019_12_14_000001_create_personal_access_tokens_table ........................................................... 19ms DONE
      2023_09_03_174616_create_messages_table .......................................................................... 6ms DONE


Vemos nuestra migración creada

Ahora si revisamos la tabla veremos los campos d ela tabla que se definio.

    

    desc messages;
    +------------+------------------+------+-----+---------+----------------+
    | Field      | Type             | Null | Key | Default | Extra          |
    +------------+------------------+------+-----+---------+----------------+
    | id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
    | nombre     | varchar(255)     | NO   |     | NULL    |                |
    | email      | varchar(255)     | NO   |     | NULL    |                |
    | mensaje    | varchar(255)     | NO   |     | NULL    |                |
    | created_at | timestamp        | YES  |     | NULL    |                |
    | updated_at | timestamp        | YES  |     | NULL    |                |
    +------------+------------------+------+-----+---------+----------------+
    6 rows in set (0.002 sec)



ahora supongamos que tenemos nuestra aplicación en producción y comenzamos a recibir mensajes. vamos a insertar unos cuantos mensajes




select * from messages;
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
| id | nombre                | email                      | mensaje                                                    | created_at | updated_at |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
|  1 | Klvst3r               | klvst3r@email.com          | Hola, saludando Klvst3r                                    | NULL       | NULL       |
|  2 | Prof. Chaim Rippin I  | quigley.durward@email.com  | Sit perspicatis non vuluptatem dolor ipsa                  | NULL       | NULL       |
|  3 | Aramando Dare         | floy.terry@email.com       | Ut qui sunt vuluptatem fuga at aut commodi                 | NULL       | NULL       |
|  4 | Kelsie Swaniawski     | bernard.tremblay@email.com | Et ut praesentium                                          | NULL       | NULL       |
|  5 | Samanta Meyert        | earline32@email.com        | Dolores aut dolor non a et                                 | NULL       | NULL       |
|  6 | Kristy Schmmitt       | kari.smith@email.com       | Et sint quo reiciendis et                                  | NULL       | NULL       |
|  7 | Prof. Joaquin Ziemann | umuller@email.com          | Mollitia ommis deleniti numquam ipsa consectetut similique | NULL       | NULL       |
|  8 | Emma Nolan III        | candido.graham@email.com   | Perspicaits similique est fugit quia facere                | NULL       | NULL       |
|  9 |                       | Katherine Schaefer         | lakin.dayana@email.com                                     | NULL       | NULL       |
| 10 | Rodolfo Beier         | irma47@morissette.org      | Voluptatum consequatur nam aut et minima                   | NULL       | NULL       |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
10 rows in set (0.001 sec)



ahora supongamos que decimimos poner el telefono del usuario que nos escribe el mensaje. Lo que haciamos anteriormente era manualmente cambiar la estructura de la base de datos, pero como se hace ahora con las migraciones.

si cambiamos las migraciones existentes y agregamos el campo telefono.



---          Schema::create('messages', function (Blueprint $table) {
                    $table->increments('id');
                    $table->string('nombre');
                    $table->string('email');
                    $table->string('phone');
                    $table->string('mensaje');
                    $table->timestamps();
                });
            }

---

Para volver a ejecutar la migración, se debe volver a deshacer:

    php artisan migrate:rollback


aplicando

 INFO  Rolling back migrations.  

  2023_09_03_174616_create_messages_table ......................................................................... 10ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ............................................................ 5ms DONE
  2019_08_19_000000_create_failed_jobs_table ....................................................................... 5ms DONE
  2014_10_12_100000_create_password_reset_tokens_table ............................................................. 3ms DONE
  2014_10_12_000000_create_users_table ............................................................................. 3ms DONE
    

    show tables;
    +----------------------+
    | Tables_in_applaravel |
    +----------------------+
    | migrations           |
    +----------------------+
    1 row in set (0.001 sec)



Y dejando solo la tabla de migraciones en la BD:




Y luego volver a ejecutar:

    php artisan migrate    


Ahora si vamos a la base de datos.




    how tables;
    +------------------------+
    | Tables_in_applaravel   |
    +------------------------+
    | failed_jobs            |
    | messages               |
    | migrations             |
    | password_reset_tokens  |
    | personal_access_tokens |
    | users                  |
    +------------------------+
    6 rows in set (0.001 sec)



y actualizamos. Seguro vemos el campo phone que agregamos recientemente, pero hemos perdido toda la información..

esc messages;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| nombre     | varchar(255)     | NO   |     | NULL    |                |
| email      | varchar(255)     | NO   |     | NULL    |                |
| phone      | varchar(255)     | NO   |     | NULL    |                |
| mensaje    | varchar(255)     | NO   |     | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
7 rows in set (0.002 sec)


Pero ya no hay datos en nuestra tabla mensajes:

    select * from messages;
    Empty set (0.001 sec)



Claramente no es lo que uqeremos.



Vamos a volver a la migración como la teniamos antes ejecutando

    php artisan migrate:rollback

Para regresar a los ultimos comandos    


Quitamos de la definicion de la tabla el campo phone

Asi que ejecutamos

    php artisan migrate:rollback
Despues

    php artisan migrate    


En la Bd vemos que la estructura esta como al inicio.


    desc messages;
    +------------+------------------+------+-----+---------+----------------+
    | Field      | Type             | Null | Key | Default | Extra          |
    +------------+------------------+------+-----+---------+----------------+
    | id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
    | nombre     | varchar(255)     | NO   |     | NULL    |                |
    | email      | varchar(255)     | NO   |     | NULL    |                |
    | mensaje    | varchar(255)     | NO   |     | NULL    |                |
    | created_at | timestamp        | YES  |     | NULL    |                |
    | updated_at | timestamp        | YES  |     | NULL    |                |
    +------------+------------------+------+-----+---------+----------------+
    6 rows in set (0.002 sec)




Volvemos a llenarla para mostrar el ejemplo:



    INSERT INTO `messages` (`id`, `nombre`, `email`, `mensaje`, `created_at`, `updated_at`) VALUES
    (1, 'Klvst3r', 'klvst3r@email.com', 'Hola, saludando Klvst3r', NULL, NULL),
    (2, 'Prof. Chaim Rippin I', 'quigley.durward@email.com', 'Sit perspicatis non vuluptatem dolor ipsa', NULL, NULL),
    (3, 'Aramando Dare', 'floy.terry@email.com', 'Ut qui sunt vuluptatem fuga at aut commodi', NULL, NULL),
    (4, 'Kelsie Swaniawski', 'bernard.tremblay@email.com', 'Et ut praesentium', NULL, NULL),
    (5, 'Samanta Meyert', 'earline32@email.com', 'Dolores aut dolor non a et', NULL, NULL),
    (6, 'Kristy Schmmitt', 'kari.smith@email.com', 'Et sint quo reiciendis et', NULL, NULL),
    (7, 'Prof. Joaquin Ziemann', 'umuller@email.com', 'Mollitia ommis deleniti numquam ipsa consectetut similique', NULL, NULL),
    (8, 'Emma Nolan III', 'candido.graham@email.com', 'Perspicaits similique est fugit quia facere', NULL, NULL),
    (9, 'Katherine Schaefer', 'lakin.dayana@email.com', 'Quis ducimus totam sint deserint odit', NULL, NULL),
    (10, 'Rodolfo Beier', 'irma47@morissette.org', 'Voluptatum consequatur nam aut et minima', NULL, NULL);



Tenemos


    ---

        select * from messages;
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
| id | nombre                | email                      | mensaje                                                    | created_at | updated_at |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
|  1 | Klvst3r               | klvst3r@email.com          | Hola, saludando Klvst3r                                    | NULL       | NULL       |
|  2 | Prof. Chaim Rippin I  | quigley.durward@email.com  | Sit perspicatis non vuluptatem dolor ipsa                  | NULL       | NULL       |
|  3 | Aramando Dare         | floy.terry@email.com       | Ut qui sunt vuluptatem fuga at aut commodi                 | NULL       | NULL       |
|  4 | Kelsie Swaniawski     | bernard.tremblay@email.com | Et ut praesentium                                          | NULL       | NULL       |
|  5 | Samanta Meyert        | earline32@email.com        | Dolores aut dolor non a et                                 | NULL       | NULL       |
|  6 | Kristy Schmmitt       | kari.smith@email.com       | Et sint quo reiciendis et                                  | NULL       | NULL       |
|  7 | Prof. Joaquin Ziemann | umuller@email.com          | Mollitia ommis deleniti numquam ipsa consectetut similique | NULL       | NULL       |
|  8 | Emma Nolan III        | candido.graham@email.com   | Perspicaits similique est fugit quia facere                | NULL       | NULL       |
|  9 | Katherine Schaefer    | lakin.dayana@email.com     | Quis ducimus totam sint deserint odit                      | NULL       | NULL       |
| 10 | Rodolfo Beier         | irma47@morissette.org      | Voluptatum consequatur nam aut et minima                   | NULL       | NULL       |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+
10 rows in set (0.001 sec)



    ---

Ahora en lugar de agregar un campo de telefono en nuestra tabla mensajes, creamos una nueva migración para alterar nuestra tabla de mensajes.

Escribimos:


    php artisan make:migration add_phone_to_messages_table --table=messages


php artisan make:migration add_phone_to_messages_table --table=messages

   INFO  Migration [database/migrations/2023_09_03_192837_add_phone_to_messages_table.php] created successfully.  



Añade telefono a la tabla mensajes, y tambien le pasamos la opción --table para especificar la table que queremos modificar en este caso messages

Abrimos el archivo y vemos que en lugar de decir Schema::create, escribe  Schema::table


---
    
    public function up(): void
    {
        Schema::table('messages', function (Blueprint $table) {
            //
        });
    }


---

Debtro añadimos el campo phone que necesitamos, indicando que acepte el valor nulo y en el metodo down()


    $table->string('phone')->nullable();

Indicamos que acepte el valor nulo, y en el metodo down() escribimos la acción opuesta es decir, removemos el campo phone. Con el metodo para remover columnas se llama "dropColumn" le pasamos el nombre del campo o columna que queremos eliminar:

    --
    return new class extends Migration
    {
        /**
         * Run the migrations.
         */
        public function up(): void
        {
            Schema::table('messages', function (Blueprint $table) {
                $table->string('phone')->nullable();
            });
        }

        /**
         * Reverse the migrations.
         */
        public function down(): void
        {
            Schema::table('messages', function (Blueprint $table) {
                $table->dropColumn('phone');
            });
        }
    };

    ---

Ahora ejecutamos la migración    

    php artisan migrate

Revisamos   la tabla de la base de datos y vemos el campo phone, sin afectar la información que se encontraba en la tabla.

desc messages;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| nombre     | varchar(255)     | NO   |     | NULL    |                |
| email      | varchar(255)     | NO   |     | NULL    |                |
| mensaje    | varchar(255)     | NO   |     | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
| phone      | varchar(255)     | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
7 rows in set (0.002 sec)


Y revisamos el contenido de la tabla:


select * from messages;
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+-------+
| id | nombre                | email                      | mensaje                                                    | created_at | updated_at | phone |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+-------+
|  1 | Klvst3r               | klvst3r@email.com          | Hola, saludando Klvst3r                                    | NULL       | NULL       | NULL  |
|  2 | Prof. Chaim Rippin I  | quigley.durward@email.com  | Sit perspicatis non vuluptatem dolor ipsa                  | NULL       | NULL       | NULL  |
|  3 | Aramando Dare         | floy.terry@email.com       | Ut qui sunt vuluptatem fuga at aut commodi                 | NULL       | NULL       | NULL  |
|  4 | Kelsie Swaniawski     | bernard.tremblay@email.com | Et ut praesentium                                          | NULL       | NULL       | NULL  |
|  5 | Samanta Meyert        | earline32@email.com        | Dolores aut dolor non a et                                 | NULL       | NULL       | NULL  |
|  6 | Kristy Schmmitt       | kari.smith@email.com       | Et sint quo reiciendis et                                  | NULL       | NULL       | NULL  |
|  7 | Prof. Joaquin Ziemann | umuller@email.com          | Mollitia ommis deleniti numquam ipsa consectetut similique | NULL       | NULL       | NULL  |
|  8 | Emma Nolan III        | candido.graham@email.com   | Perspicaits similique est fugit quia facere                | NULL       | NULL       | NULL  |
|  9 | Katherine Schaefer    | lakin.dayana@email.com     | Quis ducimus totam sint deserint odit                      | NULL       | NULL       | NULL  |
| 10 | Rodolfo Beier         | irma47@morissette.org      | Voluptatum consequatur nam aut et minima                   | NULL       | NULL       | NULL  |
+----+-----------------------+----------------------------+------------------------------------------------------------+------------+------------+-------+
10 rows in set (0.001 sec)


Ahora si deshacemos la migración

    php artisan migrate:rollback

ya no estara el campo phone



desc messages;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| nombre     | varchar(255)     | NO   |     | NULL    |                |
| email      | varchar(255)     | NO   |     | NULL    |                |
| mensaje    | varchar(255)     | NO   |     | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
6 rows in set (0.002 sec)


Tambien le podemos decir que agregue el campo "phone" despues del campo email, para ello utilizamos la funcion "after" que significa despues y por parametro la columna "email"


---
    $table->string('phone')->after('email')->nullable();

---


Ejecutamos:

    php artisan migrate


La nues estructur de la tabla queda:


desc messages;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| nombre     | varchar(255)     | NO   |     | NULL    |                |
| email      | varchar(255)     | NO   |     | NULL    |                |
| phone      | varchar(255)     | YES  |     | NULL    |                |
| mensaje    | varchar(255)     | NO   |     | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
7 rows in set (0.002 sec)



Y el contenido de la misma de la siguiente manera:

    select * from messages;
+----+-----------------------+----------------------------+-------+------------------------------------------------------------+------------+------------+
| id | nombre                | email                      | phone | mensaje                                                    | created_at | updated_at |
+----+-----------------------+----------------------------+-------+------------------------------------------------------------+------------+------------+
|  1 | Klvst3r               | klvst3r@email.com          | NULL  | Hola, saludando Klvst3r                                    | NULL       | NULL       |
|  2 | Prof. Chaim Rippin I  | quigley.durward@email.com  | NULL  | Sit perspicatis non vuluptatem dolor ipsa                  | NULL       | NULL       |
|  3 | Aramando Dare         | floy.terry@email.com       | NULL  | Ut qui sunt vuluptatem fuga at aut commodi                 | NULL       | NULL       |
|  4 | Kelsie Swaniawski     | bernard.tremblay@email.com | NULL  | Et ut praesentium                                          | NULL       | NULL       |
|  5 | Samanta Meyert        | earline32@email.com        | NULL  | Dolores aut dolor non a et                                 | NULL       | NULL       |
|  6 | Kristy Schmmitt       | kari.smith@email.com       | NULL  | Et sint quo reiciendis et                                  | NULL       | NULL       |
|  7 | Prof. Joaquin Ziemann | umuller@email.com          | NULL  | Mollitia ommis deleniti numquam ipsa consectetut similique | NULL       | NULL       |
|  8 | Emma Nolan III        | candido.graham@email.com   | NULL  | Perspicaits similique est fugit quia facere                | NULL       | NULL       |
|  9 | Katherine Schaefer    | lakin.dayana@email.com     | NULL  | Quis ducimus totam sint deserint odit                      | NULL       | NULL       |
| 10 | Rodolfo Beier         | irma47@morissette.org      | NULL  | Voluptatum consequatur nam aut et minima                   | NULL       | NULL       |
+----+-----------------------+----------------------------+-------+------------------------------------------------------------+------------+------------+
10 rows in set (0.001 sec)






migrate:refresh
------------------

Un ultimo comando que vamos a ver en esta lección es uno que agrupa dos comandos, en lugar de utilizar  

    php artisan migrate:rollback

y despues 

    php artisan migrate

Podemos ejecutar ambos simplemente utilizando

    php artisan migrate:refresh        


Como podemos ver    


    php artisan migrate:refresh

   INFO  Rolling back migrations.  

  2023_09_03_192837_add_phone_to_messages_table .................................................................... 5ms DONE
  2023_09_03_174616_create_messages_table .......................................................................... 3ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ............................................................ 2ms DONE
  2019_08_19_000000_create_failed_jobs_table ....................................................................... 2ms DONE
  2014_10_12_100000_create_password_reset_tokens_table ............................................................. 2ms DONE
  2014_10_12_000000_create_users_table ............................................................................. 5ms DONE

   INFO  Running migrations.  

  2014_10_12_000000_create_users_table ............................................................................ 14ms DONE
  2014_10_12_100000_create_password_reset_tokens_table ............................................................ 13ms DONE
  2019_08_19_000000_create_failed_jobs_table ....................................................................... 9ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ........................................................... 21ms DONE
  2023_09_03_174616_create_messages_table .......................................................................... 7ms DONE
  2023_09_03_192837_add_phone_to_messages_table .................................................................... 6ms DONE



  Primero hace rollback y luego ejecuta las migraciones nuevamente.


  Vemos que la Bd esta ahora vacia,


  elect * from messages;
    Empty set (0.001 sec)



   pero con la estructura especificada en las migraciones.



MariaDB [applaravel]> desc messages;
+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| nombre     | varchar(255)     | NO   |     | NULL    |                |
| email      | varchar(255)     | NO   |     | NULL    |                |
| phone      | varchar(255)     | YES  |     | NULL    |                |
| mensaje    | varchar(255)     | NO   |     | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+
7 rows in set (0.002 sec)



ahora que ya tenemos nuestra bd con los campos necesarios para guardar los mensajes, en la siguiente sección vamos a insertar los datos con el constructor de consultas de laravel que se llama querybuilder.


