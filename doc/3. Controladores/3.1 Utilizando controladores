3.1 Utilizando controladores

En lugar de definir toda la logica de la aplicación en el archivo web.php

Lo conveniente es utilizar controllers, ubicados en:

	/app/Http/controllers

Por defecto se tiene 
	Controller.php

Incluye muchos trails, 


Creación de controladores
------------------------

Se cra una nueva clase en un archivo 

Ej.
	Pagescontrollers.php

Agregando todo el codigo, namespaces.


Uno de los objetivos del desarrollo de aplicaciones sea lo mas raido posible.



Comandos para crear archivos rapidamente
----------------------------------------

Muestra todos los comandos disponibles
	php artisan	 		

Comandos para crear archivos
	php artisan make:controller


ej. 
	php artisan make:controller PagesController


En este archivo se crearan los metodos que reemplazaran a los que se encunetran en las rutas.


	<?php

	namespace App\Http\Controllers;

	use Illuminate\Http\Request;

	class PagesController extends Controller
	{
	    //
	}


Ej.En el archivo web.php de rutas
	
	Route::get('/', ['as' => 'home', 'uses' => 'PagesController@home']);

En el controlador PagesController se crea el metodo correspondiente (home)	

	class PagesController extends Controller
{
    public function home()
    {
        return view('home');
    }
}

Se retorna la vista home del metodo con el mismo nombre.



Errores con los controladores
------------------------------


https://litvinjuan.medium.com/how-to-fix-target-class-does-not-exist-in-laravel-8-f9e28b79f8b4


Laravel 8 se lanzó en septiembre de 2020 con un montón de nuevas características y cambios. Uno de esos cambios fue la eliminación del espacio de nombres de ruta predeterminado.

Aunque este cambio es compatible con versiones anteriores, lo que significa que los proyectos más antiguos que usaban Laravel 7.x pueden migrar fácilmente a Laravel 8.x sin tener que cambiar nada, los nuevos proyectos creados en Laravel 8 (a partir del 8 de septiembre de 2020) deben tener esto en cuenta. cuenta.

Muchos desarrolladores se han enfrentado a un problema en sus aplicaciones Laravel 8 recién creadas donde intentan cargar sus rutas y se encuentran con una excepción que dice algo como:


	Target class [PagesController] does not exist.


Para solucionar este problema

	How to fix ‘Target class does not exist’ in Laravel


No te preocupes, tu código no está roto. Lo que sucedió es que la forma en que está acostumbrado a hacer las cosas y la forma en que la mayoría de los tutoriales describen el enrutamiento no funcionan ahora. Pero esto se puede arreglar en solo unos minutos.
El cambio

Hasta Laravel 7, el archivo RouteServiceProvider.php tenía el siguiente código:

	

	protected $namespace = 'App\Http\Controllers';

	Route::middleware('web')
		->namespace($this->namespace)
		->group(base_path('routes/web.php'));


Lo que esto hace es decirle a Laravel que cargue las rutas en route/web.php, usando el middleware web y el espacio de nombres App\Http\Controllers. Esto, a su vez, significa que cada vez que declaraste una ruta usando la sintaxis de cadena, Laravel buscaría ese controlador en la carpeta App\Http\Controllers:		
	Route::get('/post', 'PostController@all');

En Laravel 8, se eliminó la variable $namespace y se cambió la declaración de ruta a:
	
	Route::midleware('web')
		->group(base_path('routes/web.php'));



Ahora, Laravel está buscando rutas dentro de tu archivo web.php, como siempre. También está aplicando el middleware web, como siempre. Pero tenga en cuenta que ya no usa el espacio de nombres anterior.

Esto significa que a partir de Laravel 8, cuando declaras tus rutas usando la sintaxis de cadena, Laravel no buscará tu controlador dentro de App\Http\Controllers.

		Route::get('/posts', 'PostController@all');


En nuestro caso es el problema que se presenta.

¿Cómo puedo solucionar esto?

El problema aquí es que Laravel no tiene idea de dónde buscar su controlador, ¡así que todo lo que tenemos que hacer es avisarle! Hay 3 formas de lograr esto:

     Vuelva a agregar el espacio de nombres manualmente para que pueda usarlo como lo hizo en Laravel 7.x y antes
     Use el espacio de nombres completo en sus archivos de ruta cuando use la sintaxis de cadena
     Usar la sintaxis de acción (recomendado)



Agregar el espacio de nombres manualmente
-----------------------------------------

Esto es bastante simple. Vaya a su archivo RoutesServiceProvider.php y verá lo siguiente:		



	public function boot()
	{

		$this->configureRateLimiting();

		$this->routes(function () {

			Route::middleware('web')
				->group(base_path('routes/web.php'));


			Route::prefix('api')
				->middleware('api')
				->group(base_path('routes/api.php'));
		});
	}



Todo lo que necesita hacer es agregar las siguientes tres líneas a este archivo y Laravel volverá a usar el espacio de nombres predeterminado como en Laravel 7.x:



	protected $namespace = 'App\Http\Controllers';

	public function boot()
	{

		$this->configureRateLimitting();

		$this->routes(function() {
			Route::middleware('web')
				->namespace(base_path('routes/web.php'));
		

		Route::prefix('api')
			->middleware('api')
			->namespace($this->namespace)
			->group(base_path('routes/api.php'));
		});
	}


¿Qué acabamos de hacer? Declaramos la variable $namespace con el espacio de nombres predeterminado para nuestros controladores y le dijimos a laravel que lo usara para nuestras rutas web y api.

Si intenta ejecutar su aplicación nuevamente, todo debería funcionar.





Uso del espacio de nombres completo

Este implica cambiar todas sus declaraciones de ruta, pero la idea es simple: anteponga los nombres de su controlador con su espacio de nombres. Vea el 
siguiente ejemplo para nuestro PostsController dentro de la carpeta app/Http/Controllers.
	
	Route::get('/posts', 'App\Http\Controllers\PostsController@all');


Si vuelve a intentarlo, todo debería funcionar sin problemas.




Uso de la sintaxis de acción

Esta es la alternativa que personalmente recomiendo, ya que la encuentro más a prueba de errores tipográficos y, según mi experiencia, proporciona una mejor compatibilidad con IDE, ya que le indicamos explícitamente al código qué clase usar. En lugar de usar nuestra sintaxis de cadena habitual, podemos usar la sintaxis de acción donde especificamos la clase y el método a usar en una matriz:	

	
		//String syntax
		Route::get('/post', 'PostsController@all');

		//Action syntax (don't forget to import your controller class)
		Route::get('/posts', [PostController::class, 'all']);


Tenga en cuenta que aquí no estamos pasando PostsController entre comillas, sino PostsController::class, que internamente devolverá 'App\Http\Controllers\PostsController'. El segundo valor en la matriz es el método para llamar dentro de ese controlador, lo que significa: “En PostsController.php llame al método 'todos'.

Nuevamente, si intenta ejecutar su aplicación nuevamente, todo debería estar en funcionamiento.



Palabras de cierre

A estas alturas, su aplicación debería estar funcionando nuevamente. Si no es así, no dude en pedir ayuda. Todos en la comunidad están ansiosos por dar una mano.

Ya sea que hayas agregado el espacio de nombres manualmente, hayas especificado el espacio de nombres completo en tus rutas o hayas optado por la sintaxis de acción, lo que acabas de hacer es decirle a Laravel en qué espacio de nombres están realmente tus controladores, por lo que ahora sabe dónde buscar.





Opcion 2

https://medium.com/@onwuka_gideon/laravel-illuminate-contracts-container-bindingresolutionexception-70fda953e7af


Laravel Illuminate\Contracts\Container\BindingResolutionException


Después de un tiempo fuera de PHP, comencé un proyecto en el que tengo un middleware que verifica si un usuario que ha iniciado sesión es un usuario o un administrador, y luego lo redirige a su ruta respectiva.

Como de costumbre, me encontré con un error que me molestó por un tiempo :):


	Mirando inocentemente, no creo que haya hecho algo malo. ¡Funciona localmente! pero cuando lo empujo a producción, sigo recibiendo el error:

	La clase de destino [App\Http\Middleware\IsUser] no existe.

     Creé la clase de middleware `IsUser` en la carpeta correcta: `/app/Http/Middleware/isUser.php`
     Y puedes ver el archivo de clase bien colocado:

     		<?phpnamespace App\Http\Middleware;
			use Closure;use Illuminate\Http\Request;
			use Illuminate\Support\Facades\Auth;
			use App\Providers\RouteServiceProvider;
			
			class IsUser
			{
			/*** Handle an incoming request.
			** @param  \Illuminate\Http\Request  $request
			* @param  \Closure  $next
			* @return mixed*/

			public function handle(Request $request, Closure $next)
			{   
				if (Auth::check()) 
				{
				       if (Auth::user()->isAdmin()) 
				       {
				                  return redirect(RouteServiceProvider::ADMIN_HOME);        
				        }
				                return $next($request);   
				}   
				return redirect('/login');  
				}
			}


3. Y por supuesto, registré el middleware en el archivo kernel.php


¿Y ahora qué?
como lo arreglé

Resulta ser un problema de distinción entre mayúsculas y minúsculas. Dado que funciona bien localmente con el código, y si inserto el código correctamente en el servidor, no funciona.

Aviso, registré el middleware en el archivo kernel.php como:

\Aplicación\Http\Middleware\IsUser::class

Guardé mi clase anteriormente como `isUser.php` en lugar de `IsUser.php` para que coincida con la clase media que registré en el archivo kernel.php.

Así que simplemente cambiar el archivo de `isUser.php` a `IsUser.php` me lo arregló.
Conclusión

Si enfrenta el mismo problema, asegúrese de que el nombre de su archivo coincida con el middleware de clase que registró en el archivo kernel.php.



			