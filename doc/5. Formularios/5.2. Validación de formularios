5.2. Validación de formularios

Veremos como validar las peticiones hechas por el navegador de manera que concuerden con la logica de la aplicaci´pon.

en el controlador observamos que se extiende a un controlador base

	    class PagesController extends Controller

Ubicado en 

	App\Http\Controller.php


Este a su vez utiliza un trail 

	use Illuminate\Foundation\Validation\ValidatesRequests;

que viene con Laravel que provee varios metoos utiles para la validación..


Regresando al controlador PaqgesControler borando el contenido del metodo mensaje

El primer parametro que recibe es el reuqest y el segundo un array con las reglas de validación.

'nombre' => 'required',
                'email' => 'email'


Donde el nombre es requerido y el campo email es validado con html5 del lado del cliente y si esta desactivo la validación del lado del cliente, quedara activo la validación del lado del servidor.

en el formulario dejamos el campo email como tipo texto, al enviar la información retorna el formulario pero no informa laravel del por que regresa asi al formulario.

Se tiene para esto un objeto que esta dispoible en todas las vistas llada errors, que contiene los errores de validación..

Para acceder a ellos. en el formulario:

accedemos con:

			<input type="text" name="nombre">
		{{ $errors->first() }}

Para obtener el primer error del campo nombre en este caso, debemos ver ahora si el error.

Si se desea tener mas de una validación se puede hacer de la siguiente manera:

	//'email' => 'required | email'
      'email' => ['required , email']

Otra forma es pasar un array de la siguiejte forma, y cualquiera de las dos funciona

Con las dos reglas de validación de email, requerida y un email valido.

Pero al hacer una validación que no pasa devolvera el valor que se tenia anteriormente en el formaulario con el metodo old().

	<input type="text" name="nombre" value={{ old('nombre') }}>


con esto el valor se mantiene. Creando otra regla de validación para el textarea requerido y con un alongitud minima de 5 caracteres.

	'mensaje' => 'required | min:5'

Hay varias opciones de validación y si se quieren saber cuales son podemos ir a:
	
	https://laravel.com/docs/10.x/validation

Haciendo click en 

	https://laravel.com/docs/10.x/validation#available-validation-rules

Con todas las reglas de validación 


Se agregan os mensajes de error al textarea

Se finaliza el formulario y la validaci[on es para todos los campos y el campo mensaje debe ser mayor a cinco caracteres				


---
	<form method="POST" action="contacto">

	 @csrf
	
	<p><label for="nombre">
		Nombre
		<input type="text" name="nombre" value={{ old('nombre') }}>
		{{ $errors->first('nombre') }}
	</label></p>
	
	<p><label for="email">
		Email
		<input type="text" name="email" value={{ old('email') }}>
		{{ $errors->first('email') }}
	</label></p>
	
	<p><label for="nombre">
		Mensaje
		<textarea name="mensaje"></textarea>
		{{ $errors->first('mensaje') }}

	</label></p>
	
	<input type="submit" value="Enviar">

</form>

---


Estilos a errores
--------------------

Para dar un color rojo en el layout de las plantillas y como no hay un proyecto real se hace en linea


Los estilos deben ir en archivos separados.

En el formulario se agrega como segundo parametro de la siguiente forma con la clase error, se buscara la cadena :message.



---

			<input type="text" name="nombre" value={{ old('nombre') }}>
		{{ $errors->first('nombre','<span class=error>:message</span>') }}

---


Aplicandose el formato a los demas campos

...,'<span class=error>:message</span>'


solo que ahora en el formulario se visualizan los mensajes de rror tal cual

	<span class=error>The nombre field is required.</span>

Ahora para imprimir HTML como estructura debemos utilizar esta sintaxis 


---

	{!! $errors->first('nombre', '<span class=error>:message</span>') !!}
---	

volvemos a la validación del formulario y listo se tiene el formato de forma correcta





Cambiar los mensajes de ingles a español
---------------------------------------


Desde la carpeta Resources

	resources/lang/en

Ha una carpeta llamada eng, aqui se guardan ñas traducciones de mensajes de validación entre otros,

Revisar el archivo

	validation.php


Buscar la palabra: required que es el mensaje que se visualiza cuando es requerido.

attribute es enlazada por el nombre del campo, en este campo nombre.

Se podria editar el mensaje directamente desde aqui. aunque hay una mejor forma de hacerla.

duplicar la carpeta llamarla es de español. En esta es donde se haran las traducciones abriendo el archivo

	resources/lang/es/validation.php

buscando : required

Este es el mensaje que se debe modificare

Pero debemos indicar a laravel que el mensaje esta en español

Para ello vamos a la carpeta config/app.php

Cambiamos en la region, cambiandolo a es que se acaba de crear

	'locale' => 'es',	


Reenviamos y ahora los mensajes deben desplegarse en español.


Para el mensaje del email

buscamos la palabra email del archivo validation.php de la traducción en español.

	'email' => 'El campo :attribute no parece un correo electronico válido.',

con esto se entiende que se tiene que traducir todos los errores, pero existe un repositorio creado por la comunidad de laravel que se puede utilizar 

Bucarg en Google
	laravel validation languajes

Abrir la primera opcion y se veran las traduccciones con los archivos

Se puee intentar copiar el contenido del archivo validation, solo que ahora no se puestra el repositorio tal cual.


https://github.com/Laravel-Lang/lang/tree/main/locales/es


Repositorio
https://github.com/Laravel-Lang/lang

documentaciópn:

	https://github.com/Laravel-Lang/lang

Manual de instalación
	https://laravel-lang.com/installation/

Cln la guia de instalación basica podemos utilizar las siguientes instrucciones desde laragon para cambiar la configuración de las alertas en español.


https://laravel-lang.com/installation/#quick-start

---

	composer require laravel-lang/common --dev

	php artisan lang:add es

	php artisan lang:update
---		



con esto debe ser suficiente para que ahora todos los mensajes esten en español

Ruta de los archivos de traducción a español


	C:\laragon\www\AppLaravelBasics\vendor\laravel\framework\src\Illuminate\Translation\lang\es

Con esto ya no sera necesario sustituir a cada uno de los archivos.

En teoria deben sustituirse los siguientes archivos.

	auth.php
	pagination.php
	passwords.php
	validation.php


Ahora si cambiamos a nuestra app a lenaguaje es, nuevamente los mensajes estaran en ingles.

De esta forma pueden convivir varios lenaguajes en la misma aplicación.



Regresanoo al PagesController


Validación de formularios
---------------------------------

Cuando tenemos archivos pequeños de validación dentro del controlador no es ningun problema, pero cuando tenemos muchos campos que validar, lo mejor es utilizar algo que se conoce como form object, o como Laravel los llama Request::object 


en la terminal

 	php artisan make:request


Lo que hace es crearnos una nueva clase Request.


Para utiliarlo hacemos en erminal:

	php artisan make:request <Parametro_nombre-de-la-clase>

Creamos
	php artisan make:request CreateMessageRequest


Si se abra la carpeta app/Http/Request


Veremos que al ejecutar el comando se crea un nuevo archivo. Esta clase "CreateMessageRequest" . Esta clase posee dos metodos

Se crea:
	C:\laragon\www\AppLaravelBasics\app/Http/Requests/CreateMessageRequest.php

authorize: Sirve para determinar si el usuario esta autorizado para realizar est acción

Co ocualquier usuario esta autorizado para enviarm un mensaje, por tanto regresamos todo a true


CreateMessageRequest
---

public function authorize(): bool
    {
        return true;
    }

---

Rules por su parte regresa un array de reglas de validación igual que las que teniamos en el controler, se copian y pegan en este bloque

---
	{
        return [
            'nombre' => 'required',
                
            'email' => ['required' , 'email'],

            'mensaje' => 'required | min:5'
        ];
    }

---


Ahora debemos inyectar esta clase en el metodo mensaje, 



Inyectar clase al metodo
----------------------
en esta clase en la parte superior observamos que la clase se extiende a:

	class CreateMessageRequest extends FormRequest

Esta clase se estaba utilizando en el controlador.

Asi que podemos reemplazar de la sguiente forma 

Dentro del controlador:

		---

			public function mensajes(App\Http\Requests\CreateMessageRequest $request)			

		---

Eliminando el codigo del metodo quedando solamente en el controlador

---
	public function mensajes(App\Http\Requests\CreateMessageRequest $request)
    {

		return $request->all();
	}
---


Esto es todo lo que se debe hacer, de ahora en adelante el contenido de este metodo solo se ejecutara si la validación pasa, en caso contrario esto no se ejecutara.



Probando:
---------
El codigo de Pagescontroller queda

---
<?php

   namespace App\Http\Controllers;
   
    use App\Http\Requests;

        class PagesController extends Controller
    {
            
        public function home()
        {
            return view('home');
        }


        public function contact()
        {

            return view('contactos');
        }

        public function mensajes(\App\Http\Requests\CreateMessageRequest $request)
        {


         return $request->all();


        }

        public function saludo($nombre = "Invitado...")
        {
            $html = "<h2>Contenido de html</h2>"; //ingresado por formulario

            $script = "<script>alert('Problema XSS - Cross Site Scripting!')</script>"; //XSS por formulario

            $consolas = [
                "Play Station 4", 
                "Xbox One", 
                "Wii U"
            ];


            return view('saludo', compact('nombre', 'html', 'consolas'));
        }
    }

---


Regresamos al formulario y verificamos que todo funciona de manera normal


Finalemnte limpiamos un poco el codigo

---

use App\Http\Requests\CreateMessageRequest;


...



        public function mensajes( $request)
        {
        	return $request->all();
        }
       ...

---


Se importa la clase del metodo al principio para limpiar un poco el codigo.

Una vez que se ha validado y guardado la información, se debe dar una respuesta al usuario , para ello se utilizan los responses.

Se vera en la siguiente lección


