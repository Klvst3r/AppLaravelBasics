2.2. Blade el motor e plantillas de Laravel

Permite escribir de forma sencilla y diverttida, basta con agregar la extensión .blade al archivo.

Vista saludo
------------


Renombrar a 
	saludo.blade.php

Ahora para hacer un echo de la varible:
	
	<h1>Saludos para {{ $nombre }}</h1>	


Mas limpio sin afectar el rendimiento de la palicación

La vista se compila y guarda en:

	/storage/framework/views

Detras de escenas hace 
	echo e($nombre);

Pasa por la funcion nativa de php //htmlentities($nombre)	Para proteger de XSS Cross Site Scripting o inyección de codigo malisioso.

Para evitar escribir o ejecutar codigios maliciosos en la aplicación.



Ejemplo de ejecución de Js
-------------------------

En las rutas se crea la variable

	
Route::get('saludos/{nombre?}', ['as' => 'saludos', function($nombre = "Invitado"){

    $html = "<h2>Contenido de html</h2>"; //ingresado por formulario

    return view('saludo', compact('nombre', 'html'));

}])->where('nombre', "[A-Za-z1-9]+");

Con esto el codigo es escapado y mostrado como una cadena de caracteres.


Para visualizar ejecutamos:

	<h2>{!! $html !! }</h2>	

Los signos de admiración son para alertarnos de que el codigo no esta siendo escapado y puede ser peligroso.

Esta lina no ejecuta codigo JS
	<h2>{{ $script }}</h2>

Se ejecuta Js por lo que hay que tener cuidado
	<h2>{!! $script !!}</h2> 	




Array de consolas
-----------------

Se pasa a la vista
rota:
	$consolas = [
        "Play Station 4", 
        "Xbox One", 
        "Wii U"
    ];



    return view('saludo', compact('nombre', 'html', 'consolas'));



Vista:
		<ul>
			@foreach($consolas as $consola)
				<li>{{ $consola }}</li>
			@endforeach
		</ul>

si el array esta vacio 

	$consolas = [];

Para estos casos se puede ocupar forelse

		<ul>
			@forelse($consolas as $consola)
				<li>{{ $consola }}</li>
			@empty
				<p>No hay consolas</p>
			@endforelse
		</ul>	


Condicionales		
--------------


Escribir mensaje solo si hay un elemento en el array

	$consolas = [
        "Play Station 4"
    ];

    return view('saludo', compact('nombre', 'html', 'consolas'));

Con el uso de if se puede enviar mensaje

	<div>
			<ul>
				@forelse($consolas as $consola)
					<li>{{ $consola }}</li>
				@empty
					<p>No hay consolas</p>
				@endforelse
			</ul>


			@if(count($consolas) === 1)
				
				<p>Solo tienes una consola</p>

			@elseif(count($consolas) > 1)

				<p>Tienes varias consolas</p>
			@else 
				<p>Array vacio</p>
			
			@endif		

		</div>



Atendiendo duplicación de contenido HTML
----------------------------------

usando plantillas de blade socluionamos la repetición de codigo.

Creamos una plantilla base

	layout.blade.php

Contendra la navegación y lo importante



Espacio de contenido individual
-------------------------------

escribiendo yield y la sección que vamos a contener
	@yield(' contenido ')	

En la vista saludo quitamos todo y colocamos:
	@extends('layout')

Similar a extender una clase en la cual, heredamos todos los metodos de la clase padre, en este caso se hereda todo el html de la plantilla layout.


Asi @section genera la seccion a visualizarse en la plantilla, y @yield invoca al contenido a utilizar y visualizarse

	@section('contenido')

	<h1>Saludos a {{ $nombre }}</h1>

	@stop


Asi para contenido y home se modificara solamente el layout


	@extends('layout')

	@section('contenido')

		<h1>Home</h1>

	@stop	


Cambio en la navegación
----------------------